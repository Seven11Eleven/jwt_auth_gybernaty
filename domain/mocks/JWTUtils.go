// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	domain "github.com/Seven11Eleven/jwt_auth_gybernaty/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// JWTUtils is an autogenerated mock type for the JWTUtils type
type JWTUtils struct {
	mock.Mock
}

// CreateAccessToken provides a mock function with given fields: author, expired
func (_m *JWTUtils) CreateAccessToken(author *domain.Author, expired int) (string, error) {
	ret := _m.Called(author, expired)

	if len(ret) == 0 {
		panic("no return value specified for CreateAccessToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Author, int) (string, error)); ok {
		return rf(author, expired)
	}
	if rf, ok := ret.Get(0).(func(*domain.Author, int) string); ok {
		r0 = rf(author, expired)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.Author, int) error); ok {
		r1 = rf(author, expired)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRefreshToken provides a mock function with given fields: author, expired
func (_m *JWTUtils) CreateRefreshToken(author *domain.Author, expired int) (string, error) {
	ret := _m.Called(author, expired)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*domain.Author, int) (string, error)); ok {
		return rf(author, expired)
	}
	if rf, ok := ret.Get(0).(func(*domain.Author, int) string); ok {
		r0 = rf(author, expired)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*domain.Author, int) error); ok {
		r1 = rf(author, expired)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractIDFromToken provides a mock function with given fields: requestedToken
func (_m *JWTUtils) ExtractIDFromToken(requestedToken string) (uuid.UUID, error) {
	ret := _m.Called(requestedToken)

	if len(ret) == 0 {
		panic("no return value specified for ExtractIDFromToken")
	}

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uuid.UUID, error)); ok {
		return rf(requestedToken)
	}
	if rf, ok := ret.Get(0).(func(string) uuid.UUID); ok {
		r0 = rf(requestedToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(requestedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsAuthorized provides a mock function with given fields: requestedToken
func (_m *JWTUtils) IsAuthorized(requestedToken string) (bool, error) {
	ret := _m.Called(requestedToken)

	if len(ret) == 0 {
		panic("no return value specified for IsAuthorized")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (bool, error)); ok {
		return rf(requestedToken)
	}
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(requestedToken)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(requestedToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewJWTUtils creates a new instance of JWTUtils. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTUtils(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTUtils {
	mock := &JWTUtils{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
