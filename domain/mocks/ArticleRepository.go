// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/Seven11Eleven/jwt_auth_gybernaty/domain"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ArticleRepository is an autogenerated mock type for the ArticleRepository type
type ArticleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, article
func (_m *ArticleRepository) Create(ctx context.Context, article *domain.Article) error {
	ret := _m.Called(ctx, article)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Article) error); ok {
		r0 = rf(ctx, article)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FetchByUserID provides a mock function with given fields: ctx, userID
func (_m *ArticleRepository) FetchByUserID(ctx context.Context, userID uuid.UUID) ([]domain.ArticleResponse, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for FetchByUserID")
	}

	var r0 []domain.ArticleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]domain.ArticleResponse, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []domain.ArticleResponse); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ArticleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByID provides a mock function with given fields: ctx, artID
func (_m *ArticleRepository) GetByID(ctx context.Context, artID uuid.UUID) (*domain.ArticleResponse, error) {
	ret := _m.Called(ctx, artID)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 *domain.ArticleResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*domain.ArticleResponse, error)); ok {
		return rf(ctx, artID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.ArticleResponse); ok {
		r0 = rf(ctx, artID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.ArticleResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, artID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewArticleRepository creates a new instance of ArticleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewArticleRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ArticleRepository {
	mock := &ArticleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
